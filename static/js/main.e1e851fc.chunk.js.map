{"version":3,"sources":["components/Header/index.jsx","components/SearchBar/index.jsx","components/EmployeeTable/index.jsx","utils/API.js","components/Container/EmployeesContainer.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","className","SearchBar","props","onSubmit","handleFormSubmit","value","name","onChange","handleInputChange","type","placeholder","EmployeeTable","scope","data-field","data-sortable","onClick","sortBy","state","filteredEmployees","map","employee","first","last","fullName","dob","formatDate","date","src","picture","thumbnail","alt","href","phone","email","login","uuid","axios","get","EmployeesContainer","search","employees","sortDirections","initialSortDirections","event","target","setState","filterEmployees","toLowerCase","trim","preventDefault","key","primary","secondary","sortedEmployees","reverse","sort","a","b","localeCompare","input","filter","concat","includes","replace","Date","push","getMonth","slice","getDate","getFullYear","join","API","then","res","data","results","catch","err","console","log","this","Component","app","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.e1e851fc.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nconst Header = () => {\n  return (\n    <header>\n      <h1 className=\"text-center\">Employee Directory</h1>\n      <p className=\"text-center\">\n        Click on column headers to filter by heading or use the search box to narrow\n        your results.\n      </p>\n    </header>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport \"./style.css\";\n\nconst SearchBar = (props) => {\n    // This sets up the search bar component's beginning state\n\n    return (\n        <nav className=\"navbar navbar-light bg-light justify-content-center\">\n          <form className=\"form-inline m-2\" onSubmit={props.handleFormSubmit}>\n            <input\n              className=\"form-control\"\n              value={props.value}\n              name=\"search\"\n              onChange={props.handleInputChange}\n              type=\"search\"\n              placeholder=\"Search\"\n            />\n          </form>\n        </nav>\n      );\n    };\n    \n    export default SearchBar;\n    ","import React from \"react\";\nimport \"./style.css\"\n\nconst EmployeeTable = (props) => {\n  return (\n    <table className=\"table table-striped table-sortable text-center\">\n      <thead>\n        <tr>\n          <th scope=\"col\">Image</th>\n          <th scope=\"col\" data-field=\"name\" data-sortable=\"true\">\n            <span onClick={() => props.sortBy(\"name\", \"last\", \"first\")}>\n              Name\n            </span>\n          </th>\n          <th scope=\"col\">\n            <span onClick={() => props.sortBy(\"phone\")}>Phone</span>\n          </th>\n          <th scope=\"col\">\n            <span onClick={() => props.sortBy(\"email\")}>Email</span>\n          </th>\n          <th scope=\"col\">\n            <span onClick={() => props.sortBy(\"dob\", \"date\")}>Birthday</span>\n          </th>\n        </tr>\n      </thead>\n      <tbody>\n        {props.state.filteredEmployees.map((employee) => {\n          const { first, last } = employee.name;\n          const fullName = `${first} ${last}`;\n\n          // This formats the date\n          const dob = props.formatDate(employee.dob.date);\n\n          return (\n            <tr key={employee.login.uuid}>\n              <td>\n                <img src={employee.picture.thumbnail} alt={fullName} />\n              </td>\n              <td className=\"align-middle\">{fullName}</td>\n              <td className=\"align-middle\">\n              <a href={`tel:+1${employee.phone}`}>{employee.phone}</a></td>\n              <td className=\"align-middle email\">\n                <a href={`mailto:${employee.email}`}>{employee.email}</a>\n              </td>\n              <td className=\"align-middle\">{dob}</td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n\nexport default EmployeeTable;\n","import axios from \"axios\";\n\nconst URL = \"https://randomuser.me/api/?results=30&nat=us\"\n\nexport default {\n    getEmployees: function() {\n        return axios.get(URL);\n    }\n}","import React, { Component } from \"react\";\nimport SearchBar from \"../SearchBar\";\nimport EmployeeTable from \"../EmployeeTable\";\nimport API from \"../../utils/API\";\n\nclass EmployeesContainer extends Component {\n    state = {\n      search: \"\",\n      employees: [],\n      filteredEmployees: [],\n      sortDirections: this.initialSortDirections,\n    };\n\n    get initialSortDirections() {\n        return {\n          name: \"\",\n          phone: \"\",\n          email: \"\",\n          dob: \"\",\n        };\n    }\n\n    // This is when the container component mounts. It will load random employees from Random User API\n    componentDidMount() {\n        API.getEmployees()\n        .then((res) =>\n            this.setState({\n            employees: res.data.results,\n            filteredEmployees: res.data.results,\n            })\n        )\n        .catch((err) => console.log(err));\n    }\n\n    // This updates search state to filter out the employees by their name\n    handleInputChange = (event) => {\n        const value = event.target.value;\n        this.setState({ search: value });\n        this.filterEmployees(value.toLowerCase().trim());\n    };\n\n    handleFormSubmit = (event) => {\n        event.preventDefault();\n    };\n\n    // This sorts with the key of a specified object. If key has children, sort by primary child and maybe a secondary child.\n    sortBy = (key, primary = 0, secondary = 0) => {\n        let sortedEmployees = this.state.filteredEmployees;\n        if (this.state.sortDirections[key]) {\n        this.setState({\n            filteredEmployees: sortedEmployees.reverse(),\n            sortDirections: {\n            ...this.initialSortDirections,\n            [key]: this.state.sortDirections[key] === \"asc\" ? \"desc\" : \"asc\",\n            },\n        });\n        } else {\n        sortedEmployees = this.state.filteredEmployees.sort((a, b) => {\n            a = a[key];\n            b = b[key];\n\n            // If secondary child given and primary are equal, then it will sort by the primary instead.\n            if (primary) {\n                if (secondary && a[primary] === b[primary]) {\n                return a[secondary].localeCompare(b[secondary]);\n                }\n                return a[primary].localeCompare(b[primary]);\n            } else {\n                return a.localeCompare(b);\n            }\n            });\n    \n            this.setState({\n            filteredEmployees: sortedEmployees,\n            sortDirections: {\n                ...this.initialSortDirections,\n                [key]: \"asc\",\n            },\n        });\n    }\n};\n\nfilterEmployees = (input) => {\n    if (input) {\n      this.setState({\n        filteredEmployees: this.state.employees.filter((employee) => {\n          return (\n            employee.name.first\n              .toLowerCase()\n              .concat(\" \", employee.name.last.toLowerCase())\n              .includes(input) ||\n            employee.phone.includes(input) ||\n            employee.phone.replace(/[^\\w\\s]/gi, \"\").includes(input) ||\n            employee.email.includes(input) ||\n            this.formatDate(employee.dob.date).includes(input)\n          );\n        }),\n      });\n    } else {\n      this.setState({ filteredEmployees: this.state.employees });\n    }\n  };\n  \n  formatDate = (date) => {\n    date = new Date(date);\n    let dob = [];\n    dob.push((\"0\" + (date.getMonth() + 1)).slice(-2));\n    dob.push((\"0\" + date.getDate()).slice(-2));\n    dob.push(date.getFullYear());\n\n    // This joins the formatted date\n    return dob.join(\"-\");\n  };\n\n  render() {\n    return (\n      <>\n        <SearchBar\n          value={this.state.search}\n          handleInputChange={this.handleInputChange}\n          handleFormSubmit={this.handleFormSubmit}\n        />\n        <div className=\"container mt-4\">\n          <EmployeeTable\n            state={this.state}\n            sortBy={this.sortBy}\n            filterEmployees={this.filterEmployees}\n            formatDate={this.formatDate}\n          />\n        </div>\n      </>\n    );\n  }\n}\nexport default EmployeesContainer;\n","import React from \"react\";\nimport \"./App.css\";\nimport Header from \"./components/Header\";\nimport EmployeesContainer from \"./components/Container/EmployeesContainer\";\n\nconst app = () => {\n  return (\n    <>\n      <Header />\n      <EmployeesContainer />\n    </>\n  );\n};\n\nexport default app;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.0/8 are considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n      headers: { 'Service-Worker': 'script' },\n    })\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready\n        .then(registration => {\n          registration.unregister();\n        })\n        .catch(error => {\n          console.error(error.message);\n        });\n    }\n  }","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from \"./serviceWorker\";\n\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();"],"sourceRoot":""}